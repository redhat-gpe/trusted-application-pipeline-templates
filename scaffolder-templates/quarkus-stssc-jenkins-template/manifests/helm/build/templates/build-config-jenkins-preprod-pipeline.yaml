kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  name: {{ .Values.app.name }}-preprod
  annotations:
    argocd.argoproj.io/sync-wave: "2"
spec:
  strategy:
    type: JenkinsPipeline
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        podTemplate(
                namespace: "{{ .Values.app.name }}-dev",
                envVars: [
                envVar(key: 'GIT_URL', value: '{{ .Values.git.repo }}'),
                envVar(key: 'COMPONENT_ID', value: '{{ .Values.app.name }}'),
                envVar(key: 'ENVIRON', value: 'preprod'),
                secretEnvVar(key: 'ROOT_USER_PASSWORD', secretName: 'common-password-secret', secretKey: 'password'),
                secretEnvVar(key: 'ARGOCD_PASSWORD', secretName: 'common-password-secret', secretKey: 'password'),
                envVar(key: 'IMAGE', value: '{{ .Values.image.host }}/{{ .Values.image.organization }}/{{ .Values.app.name }}'),
                envVar(key: 'IMAGE_REGISTRY_USER', value: 'quayadmin'),
                secretEnvVar(key: 'IMAGE_REGISTRY_PASSWORD', secretName: 'common-password-secret', secretKey: 'password'),
                envVar(key: 'STRICT', value: 'false'),
                secretEnvVar(key: 'COSIGN_PUB_ENCODED', secretName: 'signing-secrets', secretKey: 'cosign.pub'),
                ],
                activeDeadlineSeconds: 600, // 10m limit is more than enough
                idleMinutes: 1,
                workspaceVolume: dynamicPVC(requestsSize: "2Gi"),
                containers: [
                        containerTemplate(name: 'jnlp', image: 'jenkins/inbound-agent:4.13-2-alpine', runAsUser: '0', resourceRequestCpu: '1', resourceLimitCpu: '1', resourceRequestMemory: '1Gi', resourceLimitMemory: '1Gi'),
                        containerTemplate(name: 'ec', image: 'quay.io/enterprise-contract/ec-cli:362c6d6824695987bcdb7936c2efa35fd8ffb0e0', runAsUser: '0', command: 'cat', ttyEnabled: true, resourceRequestCpu: '1', resourceLimitCpu: '1', resourceRequestMemory: '1Gi', resourceLimitMemory: '1Gi'),
                        containerTemplate(name: 'skopeo', image: 'registry.redhat.io/ubi9/skopeo:9.5', runAsUser: '0', command: 'cat', ttyEnabled: true, resourceRequestCpu: '1', resourceLimitCpu: '1', resourceRequestMemory: '1Gi', resourceLimitMemory: '1Gi'),
                        containerTemplate(name: 'argocd', image: 'quay.io/redhat-gpte/argocd-cli:v2.8.4', runAsUser: '0', command: 'cat', ttyEnabled: true, resourceRequestCpu: '1', resourceLimitCpu: '1', resourceRequestMemory: '1Gi', resourceLimitMemory: '1Gi'),
                ]
        ) {
            node(POD_LABEL) {
                stage("verify-enterprise-contract") {
                    git branch: 'master', url: env.GIT_URL
                    echo "git checkout done..."
                    container('jnlp') {
                        sh """
                            echo \$(git rev-parse HEAD) > ./GIT_COMMIT
                            echo \$(git tag --sort=committerdate | tail -1) > ./GIT_TAG
        cat <<EOF > ./images.yaml
        ---
        components:
        - containerImage: "\$IMAGE"
        source:
            git:
            url: "\$GIT_URL"
            revision: "\$(cat ./GIT_COMMIT)"
        EOF

                            echo \$COSIGN_PUB_ENCODED | base64 -d > ./cosign.pub
                        """
                    }
                    container('ec') {
                        sh """
                            IMAGE_REGISTRY="\${IMAGE%%/*}"
                            cosign initialize --mirror=http://tuf.trusted-artifact-signer.svc --root=http://tuf.trusted-artifact-signer.svc/root.json
                            cosign login -u \$IMAGE_REGISTRY_USER -p \$IMAGE_REGISTRY_PASSWORD \$IMAGE_REGISTRY

                            ec validate image \
                            --verbose \
                            --images ./images.yaml \
                            --policy git::github.com/redhat-gpe/config//default \
                            --public-key ./cosign.pub \
                            --rekor-url http://rekor-server.trusted-artifact-signer.svc \
                            --ignore-rekor=false \
                            --info=true \
                            --strict=\$STRICT \
                            --show-successes \
                            --effective-time=now \
                            --output yaml=./report.yaml --output 'appstudio=./test_output' --output data=./data.yaml --output attestation=./attestations.jsonl --output json=./report-json.json

                            cat ./report.yaml
                            cat ./data.yaml
                            cat ./attestations.jsonl
                            cat ./report-json.json

                            jq . ./test_output
                        """
                    }
                }
                stage("tag") {
                    container('skopeo') {
                        sh """
                            IMAGE_REGISTRY="\${IMAGE%%/*}"
                            skopeo login -u \$IMAGE_REGISTRY_USER -p \$IMAGE_REGISTRY_PASSWORD \$IMAGE_REGISTRY
                            skopeo copy docker://\$IMAGE:latest docker://\$IMAGE:\$(cat ./GIT_TAG)
                        """
                    }
                }
                stage("update-deployment") {
                    container('jnlp') {
                        sh """
                        git config --global user.email "root@demo.redhat.com"

                        git config --global user.name "Administrator"

                        GITOPS_URL1=\$(echo \$GIT_URL | sed 's/https:\\/\\/*//')
                        GITOPS_URL2=\${GITOPS_URL1%%.git}
                        GITOPS_URL=https://root:\$ROOT_USER_PASSWORD@\$GITOPS_URL2-gitops.git
                        GIT_TAG=\$(cat ./GIT_TAG)
                        rm -rf *
                        git clone \$GITOPS_URL

                        cd \$COMPONENT_ID-gitops

                        NAMESPACE=\$COMPONENT_ID-\$ENVIRON

                        FILE=\$COMPONENT_ID-argocd-app-\$ENVIRON.yaml

                        sed -i "22s/.*/        value: '\$GIT_TAG'/" argocd/\$FILE

                        git add .

                        git commit -m "Commit image tag \$GIT_TAG to \$ENVIRON" > /dev/null 2>&1 || echo ''

                        git push > /dev/null 2>&1 || echo ''
                        """
                    }
                    container('argocd') {
                        sh """
                        argocd login --grpc-web --username admin --password \$ARGOCD_PASSWORD --insecure argocd-server.janus-argocd.svc:80
                        argocd app terminate-op \$COMPONENT_ID-bootstrap > /dev/null 2>&1 || echo ''
                        argocd app sync --async \$COMPONENT_ID-bootstrap
                        """
                    }
                }
            }
        }
  triggers:
    - type: GitLab
      gitlab:
        secretReference:
          name: gitlab-webhook-secret
